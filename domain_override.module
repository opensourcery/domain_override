<?php
// $Id$

/**
 * @file
 * Module functions for Domain Access Override.
 */

/**
 * Implementation of hook_help().
 */
function domain_override_help($path, $arg) {
  switch ($path) {
    case 'admin/help#domain_override':
      // TODO
      $help = t('Domain override help');
      break;
  }
  return '<p>'. $help .'</p>';
}

/**
 * Implementation of hook_help().
 */
function domain_override_perm() {
  $perms = array(
    'administer domain override',
    'override any content',
  );

  // Build an override permission per content type
  foreach (array_keys(node_get_types('names')) as $content_type) {
    $perms[] = "override $content_type content";
  }
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function domain_override_menu() {
  $items = array();

  // Administration page
  $items['admin/build/domain/override'] = array(
    'title' => 'Override settings',
    'description' => 'Configure which content types can be overridden per domain',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_override_settings_form'),
    'access arguments' => array('administer domain override'),
    'file' => 'domain_override.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // 'Override' node tab
  $items['node/%node/override'] = array(
    'title' => 'Override',
    'description' => 'Override node for the current domain',
    'page callback' => 'domain_override_override_page',
    'page arguments' => array(1),
    'access callback' => 'domain_override_override_access',
    'access arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for 'Override' node tab.
 */
function domain_override_override_access($node) {
  $type = $node->type;
  $access =
    (user_access("override $type content") || user_access('override any content')) &&
    node_access('view', $node) && node_access('create', $type) &&
    filter_access($node->format);
  // Allow other modules to alter $access
  drupal_alter('domain_override_access', $access, $node);
  return $access;
}

/**
 * Page callback for node/%node/override.
 */
function domain_override_override_page($node) {
  drupal_goto("node/add/{$node->type}", array('override_nid' => $node->nid));
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function domain_override_form_alter(&$form, &$form_state) {
  // We must be on a node-add form (not node edit form) of an override-enabled content type
  // we must have gotten a valid nid in GET param, and that node must be same type.
  if (isset($form['type']) && isset($form['#node']) && is_null($form['nid']['#value']) &&
      isset($_GET['override_nid']) && is_numeric($_GET['override_nid']) &&
      in_array($form['type']['#value'], _domain_override_overridable_types()) &&
      ($source_node = node_load((int)$_GET['override_nid'])) && $source_node->type == $form['type']['#value']) {

    //dpm($form);

  }
}

/**
 * Implementation of hook_nodeapi().
 */
function domain_override_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $_domain;
  //dpm(array('$node'=>$node,'$op'=>$op,'$a3'=>$a3,'$a4'=>$a4,'$_GET'=>$_GET));
  //dpm(array('domain'=>$_domain));
  switch ($op) {
    case 'presave':
      break;

    case 'save':
      break;
  }
}

/**
 * Determines which content types are currently enabled for overridability.
 * @return
 *   array suitable for a checkboxes form element's options.
 */
function _domain_override_overridable_types() {
  $overridable = array();
  foreach (array_keys(node_get_types('names')) as $type) {
    if (variable_get('domain_override_type_'. $type, FALSE)) {
      $overridable[] = $type;
    }
  }
  return $overridable;
}

