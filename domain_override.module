<?php
// $Id$

/**
 * @file
 * Module functions for Domain Access Override.
 */

/**
 * Implementation of hook_help().
 */
function domain_override_help($path, $arg) {
  switch ($path) {
    case 'admin/help#domain_override':
      // TODO
      $help = t('Domain override help');
      break;
  }
  return '<p>'. $help .'</p>';
}

/**
 * Implementation of hook_help().
 */
function domain_override_perm() {
  $perms = array(
    'administer domain override',
    'override any content',
  );

  // Build an override permission per content type
  foreach (array_keys(node_get_types('names')) as $content_type) {
    $perms[] = "override $content_type content";
  }
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function domain_override_menu() {
  $items = array();

  // Administration page
  $items['admin/build/domain/override'] = array(
    'title' => 'Override settings',
    'description' => 'Configure which content types can be overridden per domain',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_override_settings_form'),
    'access arguments' => array('administer domain override'),
    'file' => 'domain_override.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // 'Override' node tab

  return $items;
}

/**
 * Access callback for 'Override' node tab.
 */
function domain_override_override_access() {
  return TRUE;
}

/**
 * Determines which content types are currently enabled for overridability.
 * @return
 *   array suitable for a checkboxes form element's options.
 */
function _domain_override_overridable_types() {
  $overridable = array();
  foreach (array_keys(node_get_types('names')) as $type) {
    if (variable_get('domain_override_type_'. $type, FALSE)) {
      $overridable[] = $type;
    }
  }
  return $overridable;
}

