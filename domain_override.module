<?php
// $Id$

/**
 * @file
 * Module functions for Domain Override.
 */

/**
 * Implementation of hook_help().
 */
function domain_override_help($path, $arg) {
  switch ($path) {
    case 'admin/help#domain_override':
      $help = t('Domain Override allows overriding nodes for a specific domain. For instance, say you have an "About Us" page with company details, and that page is set to "Publish to all affiliates." Now, a site editor for your engineering subdomain thinks that page\'s content should be different when viewed on the engineering subdomain -- he wants to essentially "override" the node for the engineering subdomain. Once given proper permissions, he can click the "Override" tab on the node page; Domain Override will create a copy of the node and modify the domain settings for the original node to exclude the engineering subdomain. It will also assign <em>only</em> the engineering subdomain to the new copy of the node (the override). The engineering editor will then be sent directly to the edit page for the new copy of the "About Us" node that is published only on his domain.');
      break;
  }
  return '<p>'. $help .'</p>';
}

/**
 * Implementation of hook_help().
 */
function domain_override_perm() {
  $perms = array(
    'administer domain override',
    'override any content',
  );

  // Build an override permission per content type
  foreach (array_keys(node_get_types('names')) as $content_type) {
    $perms[] = "override $content_type content";
  }
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function domain_override_menu() {
  $items = array();

  // Administration page
  $items['admin/build/domain/override'] = array(
    'title' => 'Override settings',
    'description' => 'Configure which content types can be overridden per domain',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_override_settings_form'),
    'access arguments' => array('administer domain override'),
    'file' => 'domain_override.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // 'Override' node tab
  $items['node/%node/override'] = array(
    'title' => 'Override',
    'description' => 'Override node for the current domain',
    'page callback' => 'domain_override_override_page',
    'page arguments' => array(1),
    'access callback' => 'domain_override_override_access',
    'access arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for 'Override' node tab.
 */
function domain_override_override_access($node) {
  global $_domain;
  $type = $node->type;

  // Node must be published to current domain and at least one other domain
  // (or published to all domains via $node->domain_site).
  // Otherwise, overriding it on current domain doesn't make sense.
  $access = in_array($type, _domain_override_overridable_types()) &&
    ($node->domain_site || (isset($node->domains[$_domain['domain_id']]) && count($node->domains) > 1)) &&
    (user_access("override $type content") || user_access('override any content')) &&
    node_access('view', $node) && node_access('create', $type) &&
    filter_access($node->format);

  // Allow other modules to alter $access
  drupal_alter('domain_override_access', $access, $node);
  return $access;
}

/**
 * Page callback for node/%node/override.
 */
function domain_override_override_page($node) {
  global $_domain, $user;

  _domain_override_unpublish_domain($node, $_domain['domain_id']);

  // Clone the node (with inspiration from the node_clone project)
  $original_node = drupal_clone($node);
  $node->nid = NULL;
  $node->vid = NULL;
  $node->tnid = NULL;
  $node->name = $user->name;
  $node->uid = $user->uid;
  $node->created = NULL;
  $node->menu = NULL;
  $node->book['mlid'] = NULL;
  $node->path = NULL;
  $node->files = array();
  $node->title = t('Override for !domain: !title', array('!title' => $node->title, '!domain' => $_domain['subdomain']));

  // TODO: Copy translations of original node, too

  // new node should be accessible to just one domain
  $node->domains = array($_domain['domain_id'] => $_domain['domain_id']);
  $node->domain_site = FALSE; // All affiliates? No.
  $node->subdomains = array($_domain['domain_id'] => $_domain['sitename']);

  // Allow other modules to alter the new node
  drupal_alter('domain_override_node', $node, $original_node);
  node_save($node);

  // Keep track of the override
  $domain_override = new stdClass;
  $domain_override->nid = $original_node->nid;
  $domain_override->nid_override = $node->nid;
  $domain_override->domain_id = $_domain['domain_id'];
  drupal_write_record('domain_override', $domain_override);

  // Send user to edit their new node
  drupal_goto("node/{$node->nid}/edit");
}

// Define the custom_url_rewrite_inbound() function if not already defined.
// If it already exists, hopefully it's because url_alter module is installed.
// That module will call our hook_url_inbound_alter.
if (!function_exists('custom_url_rewrite_inbound')) {
  function custom_url_rewrite_inbound(&$path, &$options, $original_path) {
    domain_override_url_inbound_alter($path, $options, $original_path);
  }
}

/**
 * Implementation of hook_url_inbound_alter().
 */
function domain_override_url_inbound_alter(&$result, $path, $path_language) {
  // exit as quickly if possible if we're not on a node/% path.
  $parts = explode('/', $result);
  if ($parts[0] != 'node' || !is_numeric($parts[1])) {
    return;
  }

  // domain module hasn't initialized value in domain_initial_domain() yet;
  // don't use it.
  global $_domain;

  $nid = (int)$parts[1];

  // Look up the override for this domain
  $nid_override = db_result(db_query('SELECT nid_override FROM {domain_override} WHERE nid = %d AND domain_id = %d',
    array(':nid' => $nid, ':domain_id' => $_domain['domain_id'])));

  if ($nid_override) {
    $parts[1] = $nid_override;
    $result = implode('/', $parts);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function domain_override_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      // If it was an override of some other node, forget that override.
      db_query('DELETE FROM {domain_override} WHERE nid_override = %d', $node->nid);
      break;
  }
}

/**
 * Determines which content types are currently enabled for overridability.
 * @return
 *   array suitable for a checkboxes form element's options.
 */
function _domain_override_overridable_types() {
  $overridable = array();
  foreach (array_keys(node_get_types('names')) as $type) {
    if (variable_get('domain_override_type_'. $type, FALSE)) {
      $overridable[] = $type;
    }
  }
  return $overridable;
}

/**
 * Unpublishes a node from the given domain.
 */
function _domain_override_unpublish_domain($node, $domain_id) {
  assert($node->domain_site || isset($node->domains[$domain_id]));

  // If node was published to all affiliates, we must make sure the individual
  // domains are all listed in $node->domains and remove "publish for all"
  if ($node->domain_site) {
    $node->domains = drupal_map_assoc(array_keys(domain_domains()));
    $node->domain_site = FALSE;

    // we just rebuilt domains list, and id 0 (main domain) must be stored as
    // -1 there.
    if (isset($node->domains[0])) {
      unset($node->domains[0]);
      $node->domains[-1] = -1;
    }
  }

  // Unpublish $node from the given domain
  unset($node->domains[$domain_id]);
  node_save($node);
}

